{"version":3,"file":"static/js/408.e65a5fa1.chunk.js","mappings":"oMAEaA,EAAa,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAMK,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAcF,EAAdE,eAAc,OAC9BL,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAAUC,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMZ,GAAWG,UAC5DD,EAAAA,EAAAA,KAAA,KAAAC,SAAII,KADKD,EAEJ,OAKjB,C,+JCTe,SAASO,IAAc,IAADC,EACnCC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BhB,EAAKkB,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA4BC,EAAAA,EAAAA,MAAiBC,GAAAJ,EAAAA,EAAAA,GAAAE,EAAA,GAAtCG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,EAA2B,QAAtBX,EAAGS,EAAOG,IAAI,gBAAQ,IAAAZ,EAAAA,EAAI,IAErCa,EAAAA,EAAAA,YAAU,WAOkB,SAAAC,IAOzB,OAPyBA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA1B,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAE8BC,EAAAA,EAAAA,IAAkBZ,GAAO,KAAD,EAAAO,EAAAE,EAAAI,KAA1CL,EAAOD,EAAPC,QACRd,EAASc,GAASC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAElBM,EAAAA,GAAAA,MAAY,oBAAoB,yBAAAN,EAAAO,OAAA,GAAAV,EAAA,mBAEnCW,MAAA,KAAAC,UAAA,CAba,KAAVlB,IAGA1B,EAAM6C,OAAS,GAElB,WACyBhB,EAAAc,MAAC,KAADC,UAAA,CAS1BE,GACF,GAAG,CAACpB,EAAO1B,IAeX,OACE+C,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA5C,SAAA,EACE2C,EAAAA,EAAAA,MAAA,QAAME,SAfW,SAAAC,GACnBA,EAAIC,iBACJ,IACMC,EADOF,EAAIG,cACCC,OAAOC,MAAMC,OAE1BJ,GAKL3B,EAAU,CAAEC,MAAO0B,IACnBhC,EAAS,KALPqB,EAAAA,GAAAA,MAAY,uHAMhB,EAGiCrC,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,SACEsD,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,aAAcnC,EACdoC,YAAY,mBAEd3D,EAAAA,EAAAA,KAAA,UAAQsD,KAAK,SAAQrD,UACnBD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,gBAGTJ,EAAM6C,OAAS,IAAK1C,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACE,MAAOA,KACxCG,EAAAA,EAAAA,KAAC4D,EAAAA,GAAO,CAACC,SAAS,YAAYC,cAAc,MAGlD,C","sources":["components/MoviesList/MoviesList.js","pages/MoviesPage.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <div>\n      <ul>\n        {films.map(({ id, original_title }) => (\n          <Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n            <p>{original_title}</p>\n          </Link>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { fetchSearchMovies } from 'api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport default function MoviesPage() {\n  const [films, setFilms] = useState([]);\n  const [params, setParams] = useSearchParams();\n\n  const query = params.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    if (films.length > 0) {\n      return;\n    }\n    async function fetchMovies() {\n      try {\n        const { results } = await fetchSearchMovies(query);\n        setFilms(results);\n      } catch (error) {\n        toast.error('Please Try Again');\n      }\n    }\n\n    fetchMovies();\n  }, [query, films]);\n\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const word = form.search.value.trim();\n\n    if (!word) {\n      toast.error('Заповніть поле пошуку');\n      return;\n    }\n\n    setParams({ query: word });\n    setFilms([]);\n  };\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          defaultValue={query}\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n      {films.length > 0 && <MoviesList films={films} />}\n      <Toaster position=\"top-right\" reverseOrder={false} />\n    </>\n  );\n}\n"],"names":["MoviesList","_ref","films","location","useLocation","_jsx","children","map","_ref2","id","original_title","Link","to","concat","state","from","MoviesPage","_params$get","_useState","useState","_useState2","_slicedToArray","setFilms","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","query","get","useEffect","_fetchMovies","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchSearchMov","results","_context","prev","next","fetchSearchMovies","sent","t0","toast","stop","apply","arguments","length","fetchMovies","_jsxs","_Fragment","onSubmit","evt","preventDefault","word","currentTarget","search","value","trim","type","name","autoComplete","autoFocus","defaultValue","placeholder","Toaster","position","reverseOrder"],"sourceRoot":""}